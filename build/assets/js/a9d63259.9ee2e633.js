"use strict";(self.webpackChunkveltejs_docs=self.webpackChunkveltejs_docs||[]).push([[4913],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>y});var a=n(7294);function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){o(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,o=function(t,e){if(null==t)return{};var n,a,o={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(o[n]=t[n]);return o}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(o[n]=t[n])}return o}var l=a.createContext({}),c=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=c(t.components);return a.createElement(l.Provider,{value:e},t.children)},m="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,o=t.mdxType,r=t.originalType,l=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),m=c(n),d=o,y=m["".concat(l,".").concat(d)]||m[d]||p[d]||r;return n?a.createElement(y,i(i({ref:e},u),{},{components:n})):a.createElement(y,i({ref:e},u))}));function y(t,e){var n=arguments,o=e&&e.mdxType;if("string"==typeof t||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s[m]="string"==typeof t?t:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7118:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:3},i="Mutations",s={unversionedId:"velx/core-concepts/mutations",id:"velx/core-concepts/mutations",title:"Mutations",description:"The only way to actually change state in a VelX store is by committing a mutation. VelX mutations are very similar to events",source:"@site/docs/velx/core-concepts/mutations.md",sourceDirName:"velx/core-concepts",slug:"/velx/core-concepts/mutations",permalink:"/next/velx/core-concepts/mutations",draft:!1,editUrl:"https://github.com/RoDDy18/veltejs-docs/tree/main/docs/velx/core-concepts/mutations.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Actions",permalink:"/next/velx/core-concepts/actions"},next:{title:"Advanced",permalink:"/next/category/advanced"}},l={},c=[{value:"Mutations with Payload",id:"mutations-with-payload",level:2},{value:"Using Constants for Mutation Keys",id:"using-constants-for-mutation-keys",level:2}],u={toc:c},m="wrapper";function p(t){let{components:e,...n}=t;return(0,o.kt)(m,(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mutations"},"Mutations"),(0,o.kt)("p",null,"The only way to actually change state in a VelX store is by committing a mutation. VelX mutations are very similar to events: each mutation has a string type and a handler. The handler function is where we perform actual state modifications, and it will receive the state as the first argument:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'import { velX } from "velte"\n\nconst store = new velX({\n    state: {\n        count : 1\n    },\n    mutations: {\n        increment(state) {\n            //mutate state\n            state.count = state.count + 1\n            return state\n        }\n    }\n})\n')),(0,o.kt)("p",null,'You cannot directly call a mutation handler. Think of it more like event registration: "When a mutation with type increment is triggered, call this handler." To invoke a mutation handler, you need to call an ',(0,o.kt)("a",{parentName:"p",href:"/next/velx/core-concepts/actions"},"action")," with a mutation key. If a mutation is found with that key, the mutation runs. "),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"increment")," is the name of the mutation key in our example above.")),(0,o.kt)("h2",{id:"mutations-with-payload"},"Mutations with Payload"),(0,o.kt)("p",null,"You can pass an additional argument to mutation handlers, which is called the payload for the mutation:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"...\nmutations: {\n    increment(state, payload) {\n        //mutate state\n        state.count = state.count + payload\n        return state\n    }\n}\n")),(0,o.kt)("p",null,"In some cases, the payload should be an object so that it can contain multiple fields, and the recorded mutation will also be more descriptive:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'//triggering an action to call a mutation\nstore.dispatch("increment", {\n    amount: 10\n})\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"...\nmutations: {\n    increment(state, payload) {\n        //mutate state\n        state.count = state.count + payload.amount\n        return state\n    }\n}\n")),(0,o.kt)("h2",{id:"using-constants-for-mutation-keys"},"Using Constants for Mutation Keys"),(0,o.kt)("p",null,"It is a commonly seen pattern to use constants for mutation types in various Flux implementations. This allows the code to take advantage of tooling like linters, and putting all constants in a single file allows your collaborators to get an at-a-glance view of what mutations are possible in the entire application:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="mutation_key.js"',title:'"mutation_key.js"'},'export const SOME_MUTATION = "SOME_MUTATION"\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="store.js"',title:'"store.js"'},'import { velX } from "velte"\nimport { SOME_MUTATION } from "./mutation_key"\n\nconst store = new velX({\n    state: { ... },\n    mutations: {\n        // we can use the ES2015 computed property name feature\n        // to use a constant as the function name\n        [SOME_MUTATION] (state) {\n            //mutate state\n            return state\n        }\n    }\n})\n')))}p.isMDXComponent=!0}}]);