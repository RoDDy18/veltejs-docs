"use strict";(self.webpackChunkveltejs_docs=self.webpackChunkveltejs_docs||[]).push([[6469],{7430:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"2.0.0-rc.0","label":"2.0.0-rc.0","banner":null,"badge":true,"noIndex":false,"className":"docs-version-2.0.0-rc.0","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/","docId":"intro"},{"type":"link","label":"Quick Start Guide","href":"/get-started","docId":"get-started"},{"type":"link","label":"CLI","href":"/cli","docId":"cli"},{"type":"category","label":"API Reference","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Global API","href":"/api/global","docId":"api/global"},{"type":"link","label":"Lifecycle Hooks","href":"/api/hooks","docId":"api/hooks"},{"type":"link","label":"Reactivity","href":"/api/reactivity","docId":"api/reactivity"},{"type":"link","label":"Misc","href":"/api/misc","docId":"api/misc"},{"type":"link","label":"VelX","href":"/api/velx","docId":"api/velx"}],"href":"/category/api-reference"},{"type":"category","label":"Essentials","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Creating a Velte Application","href":"/essentials/application","docId":"essentials/application"},{"type":"link","label":"Velte\'s Syntax","href":"/essentials/syntax","docId":"essentials/syntax"},{"type":"link","label":"Reactivity","href":"/essentials/reactivity","docId":"essentials/reactivity"},{"type":"link","label":"Traits","href":"/essentials/traits","docId":"essentials/traits"},{"type":"link","label":"Conditional Rendering","href":"/essentials/conditions","docId":"essentials/conditions"},{"type":"link","label":"List Rendering","href":"/essentials/list","docId":"essentials/list"},{"type":"link","label":"Event handling","href":"/essentials/events","docId":"essentials/events"},{"type":"link","label":"Form input Binding","href":"/essentials/input","docId":"essentials/input"},{"type":"link","label":"Lifecycle Hooks","href":"/essentials/hooks","docId":"essentials/hooks"},{"type":"link","label":"Pub/Sub Events Pattern","href":"/essentials/pubsub","docId":"essentials/pubsub"},{"type":"link","label":"Fragments","href":"/essentials/fragments","docId":"essentials/fragments"}],"href":"/category/essentials"},{"type":"category","label":"Components","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Velte components","href":"/components/basics","docId":"components/basics"},{"type":"link","label":"Component Traits","href":"/components/traits","docId":"components/traits"},{"type":"link","label":"Component Events","href":"/components/events","docId":"components/events"},{"type":"link","label":"Async components","href":"/components/async","docId":"components/async"},{"type":"link","label":"Pure Components","href":"/components/pure","docId":"components/pure"}],"href":"/category/components"},{"type":"category","label":"Misc","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Rendering","href":"/misc/rendering","docId":"misc/rendering"},{"type":"link","label":"State Managment","href":"/misc/states","docId":"misc/states"},{"type":"link","label":"Routing","href":"/misc/routes","docId":"misc/routes"},{"type":"link","label":"Tooling","href":"/misc/tools","docId":"misc/tools"}],"href":"/category/misc"},{"type":"category","label":"VelX - State Management","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"What is VelX?","href":"/velx/intro","docId":"velx/intro"},{"type":"link","label":"Getting Started","href":"/velx/get-started","docId":"velx/get-started"},{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"State","href":"/velx/core-concepts/state","docId":"velx/core-concepts/state"},{"type":"link","label":"Actions","href":"/velx/core-concepts/actions","docId":"velx/core-concepts/actions"},{"type":"link","label":"Mutations","href":"/velx/core-concepts/mutations","docId":"velx/core-concepts/mutations"}],"href":"/category/core-concepts"},{"type":"category","label":"Advanced","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Application Structure","href":"/velx/advanced/structure","docId":"velx/advanced/structure"},{"type":"link","label":"Strict Mode","href":"/velx/advanced/strict","docId":"velx/advanced/strict"},{"type":"link","label":"Dev Tools","href":"/velx/advanced/tools","docId":"velx/advanced/tools"}],"href":"/category/advanced"}],"href":"/category/velx---state-management"},{"type":"category","label":"Best Practice","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Scaling Up","href":"/best-practice/scale","docId":"best-practice/scale"},{"type":"link","label":"Production Deployment","href":"/best-practice/deployment","docId":"best-practice/deployment"},{"type":"link","label":"Security","href":"/best-practice/security","docId":"best-practice/security"}],"href":"/category/best-practice"}]},"docs":{"api/global":{"id":"api/global","title":"Global API","description":"VelteElement()","sidebar":"tutorialSidebar"},"api/hooks":{"id":"api/hooks","title":"Lifecycle Hooks","description":"onCreated()","sidebar":"tutorialSidebar"},"api/misc":{"id":"api/misc","title":"Misc","description":"render()","sidebar":"tutorialSidebar"},"api/reactivity":{"id":"api/reactivity","title":"Reactivity","description":"APIs tagged with experimental might change without a major version update.","sidebar":"tutorialSidebar"},"api/velx":{"id":"api/velx","title":"VelX","description":"VelX State Managment Base Class, all VelX stores inherit from, with actions, mutations, state, devTools, strictMode, dispatch for dispatching actions and commit for commiting mutations.","sidebar":"tutorialSidebar"},"best-practice/deployment":{"id":"best-practice/deployment","title":"Production Deployment","description":"Using Build Tools","sidebar":"tutorialSidebar"},"best-practice/scale":{"id":"best-practice/scale","title":"Scaling Up","description":"To ensure your application scales well as it grows bigger, follow these tips:","sidebar":"tutorialSidebar"},"best-practice/security":{"id":"best-practice/security","title":"Security","description":"Report Vulnerabilities","sidebar":"tutorialSidebar"},"cli":{"id":"cli","title":"CLI","description":"Bootstrap your new velte projects with the official CLI tool create-velte-app","sidebar":"tutorialSidebar"},"components/async":{"id":"components/async","title":"Async components","description":"To use async/await functionality in velte, simple mark the function or method with the async keyword and perform your async tasks.","sidebar":"tutorialSidebar"},"components/basics":{"id":"components/basics","title":"Velte components","description":"You should always import VelteElement and VelteComponent from velte when using velte components.","sidebar":"tutorialSidebar"},"components/events":{"id":"components/events","title":"Component Events","description":"Using events Listeners in components are the same as using them in elements. check out how to use event handlers","sidebar":"tutorialSidebar"},"components/pure":{"id":"components/pure","title":"Pure Components","description":"These are class components that only include a render() method that returns JSX to be rendered. To use reactive states with these components, use the changeState() function.","sidebar":"tutorialSidebar"},"components/traits":{"id":"components/traits","title":"Component Traits","description":"Component traits are simply data traits for passing data into a component, nothing special. They are not attributes or directives, just plain definitions.","sidebar":"tutorialSidebar"},"essentials/application":{"id":"essentials/application","title":"Creating a Velte Application","description":"velte applications are structured with components made with JSX and Javascript.","sidebar":"tutorialSidebar"},"essentials/conditions":{"id":"essentials/conditions","title":"Conditional Rendering","description":"This is literally what it sounds like, \\"I would only render something when a condition is true, if not i\'ll render something else\\". This makes our web apps more dynamic.","sidebar":"tutorialSidebar"},"essentials/events":{"id":"essentials/events","title":"Event handling","description":"when a user performs an action like clicking on buttons, double clicking on buttons, hovers on images and even submitting a form, our application can react to those actions known as events.","sidebar":"tutorialSidebar"},"essentials/fragments":{"id":"essentials/fragments","title":"Fragments","description":"A common pattern in Velte is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.","sidebar":"tutorialSidebar"},"essentials/hooks":{"id":"essentials/hooks","title":"Lifecycle Hooks","description":"Every velte component instance or DOM element goes through a series of initialization steps when it\'s created, mounted, updated or unmounted. Thus creating a lifecycle for every component. This gives you the ability to input code at any stage of the lifecycle to make components dynamic. For example, performing API calls in the onCreated() hook before the component is mounted.","sidebar":"tutorialSidebar"},"essentials/input":{"id":"essentials/input","title":"Form input Binding","description":"You can bind form input traits like value to variables. When this is done, the value of the variable would be assigned to form input trait.","sidebar":"tutorialSidebar"},"essentials/list":{"id":"essentials/list","title":"List Rendering","description":"This is simply looping through an array of items for rendering or performing functions.","sidebar":"tutorialSidebar"},"essentials/pubsub":{"id":"essentials/pubsub","title":"Pub/Sub Events Pattern","description":"The Publish/Subscribe pattern, sometimes known as pub/sub, is an architectural design pattern that enables publishers and subscribers to communicate with one another. In this arrangement, the publisher and subscriber rely on an event manager to send events from the publisher to the subscribers.","sidebar":"tutorialSidebar"},"essentials/reactivity":{"id":"essentials/reactivity","title":"Reactivity","description":"velte\'s reactivity comes from reconcile() in @velte/dom which takes in the oldVnode and newVnode  to render after diffing this makes velte intelligently choose what parts of your components needs to be re-rendered, which out re-rendering everything.","sidebar":"tutorialSidebar"},"essentials/syntax":{"id":"essentials/syntax","title":"Velte\'s Syntax","description":"Velte uses an HTML-based template syntax JSX) that allows you to declaratively bind the rendered DOM to the underlying component instance\'s data. All velte templates are syntactically valid HTML that can be parsed by spec-compliant browsers and HTML parsers.","sidebar":"tutorialSidebar"},"essentials/traits":{"id":"essentials/traits","title":"Traits","description":"A common need for setting traits is manipulating an element\'s class list, its inline styles and data attributes.","sidebar":"tutorialSidebar"},"get-started":{"id":"get-started","title":"Quick Start Guide","description":"The rest of the documentation assumes basic familiarity with HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics and then come back! You can check your knowledge level with this JavaScript overview. Prior experience with other frameworks helps, but is not required.","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Introduction","description":"Velte banner","sidebar":"tutorialSidebar"},"misc/rendering":{"id":"misc/rendering","title":"Rendering","description":"Client-Side Rendering","sidebar":"tutorialSidebar"},"misc/routes":{"id":"misc/routes","title":"Routing","description":"This is used in making single page applications, literally with only one HTML page. When the user makes a request for a new page like /about , The router would remove the \\"current page\\" and display the about page information on the same HTML page.","sidebar":"tutorialSidebar"},"misc/states":{"id":"misc/states","title":"State Managment","description":"Every velte component instance already \\"manages\\" its own reactive state. Take a simple counter component as an example:","sidebar":"tutorialSidebar"},"misc/tools":{"id":"misc/tools","title":"Tooling","description":"Various ways you can use velte for your next project.","sidebar":"tutorialSidebar"},"velx/advanced/strict":{"id":"velx/advanced/strict","title":"Strict Mode","description":"To enable strict mode, simply pass in strictMode","sidebar":"tutorialSidebar"},"velx/advanced/structure":{"id":"velx/advanced/structure","title":"Application Structure","description":"VelX doesn\'t really restrict how you structure your code. Rather, it enforces a set of high-level principles:","sidebar":"tutorialSidebar"},"velx/advanced/tools":{"id":"velx/advanced/tools","title":"Dev Tools","description":"To enable dev tools, simply pass in devTools","sidebar":"tutorialSidebar"},"velx/core-concepts/actions":{"id":"velx/core-concepts/actions","title":"Actions","description":"Actions are similar to mutations, the differences being that:","sidebar":"tutorialSidebar"},"velx/core-concepts/mutations":{"id":"velx/core-concepts/mutations","title":"Mutations","description":"The only way to actually change state in a VelX store is by committing a mutation. VelX mutations are very similar to events","sidebar":"tutorialSidebar"},"velx/core-concepts/state":{"id":"velx/core-concepts/state","title":"State","description":"VelX uses a single state tree per instance - that is, this single object contains all your application level state and serves as the \\"single source of truth\\" per instance. This also means usually you will have only one store for each application. A single state tree makes it straightforward to locate a specific piece of state, and allows us to easily take snapshots of the current app state for debugging purposes.","sidebar":"tutorialSidebar"},"velx/get-started":{"id":"velx/get-started","title":"Getting Started","description":"At the center of every VelX application is the store. A \\"store\\" is basically a container that holds your application state. There are two things that make a VelX store different from a plain global object:","sidebar":"tutorialSidebar"},"velx/intro":{"id":"velx/intro","title":"What is VelX?","description":"VelX is an event driven proxy state management pattern for Velte applications. It serves as a centralized store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion.","sidebar":"tutorialSidebar"}}}')}}]);