"use strict";(self.webpackChunkveltejs_docs=self.webpackChunkveltejs_docs||[]).push([[2881],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1976:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3},i="Reactivity",s={unversionedId:"essentials/reactivity",id:"version-1.1.0/essentials/reactivity",title:"Reactivity",description:"velte's reactivity comes from Velte.updater() in @velte/dom which takes in the oldVnode and newVnode  to render after diffing this makes velte intelligently choose what parts of your components needs to be re-rendered, which out re-rendering everything.",source:"@site/versioned_docs/version-1.1.0/essentials/reactivity.md",sourceDirName:"essentials",slug:"/essentials/reactivity",permalink:"/1.1.0/essentials/reactivity",draft:!1,editUrl:"https://github.com/RoDDy18/veltejs-docs/tree/main/versioned_docs/version-1.1.0/essentials/reactivity.md",tags:[],version:"1.1.0",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Velte's Syntax",permalink:"/1.1.0/essentials/syntax"},next:{title:"Traits",permalink:"/1.1.0/essentials/traits"}},l={},c=[{value:"Reactivity on Class Components",id:"reactivity-on-class-components",level:2},{value:"<code>this.setState()</code>",id:"thissetstate",level:3},{value:"<code>this.reactToState()</code>",id:"thisreacttostate",level:3}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"reactivity"},"Reactivity"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"}," velte's reactivity comes from ",(0,a.kt)("inlineCode",{parentName:"p"},"Velte.__updater()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"@velte/dom")," which takes in the ",(0,a.kt)("inlineCode",{parentName:"p"},"oldVnode")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"newVnode"),"  to render after ",(0,a.kt)("a",{parentName:"p",href:"https://www.geeksforgeeks.org/explain-dom-diffing/"},"diffing")," this makes velte intelligently choose what parts of your components needs to be re-rendered, which out re-rendering everything.")),(0,a.kt)("h2",{id:"reactivity-on-class-components"},"Reactivity on Class Components"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"}," Before going through this, you should understand how velte class components works. ")),(0,a.kt)("h3",{id:"thissetstate"},(0,a.kt)("inlineCode",{parentName:"h3"},"this.setState()")),(0,a.kt)("p",null,"The responsibility of how to update the DOM whenever you call ",(0,a.kt)("inlineCode",{parentName:"p"},"this.setState()")," lies in ",(0,a.kt)("inlineCode",{parentName:"p"},"@velte/dom")," rather than ",(0,a.kt)("inlineCode",{parentName:"p"},"@velte/core"),". When ",(0,a.kt)("inlineCode",{parentName:"p"},"this.setState()")," is called, velte calls ",(0,a.kt)("inlineCode",{parentName:"p"},"Velte.__updater()")," under the hood."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"this.setState({count: this.state.count + 1})\n")),(0,a.kt)("p",null,"The value of ",(0,a.kt)("inlineCode",{parentName:"p"},"count")," is updated and re-rendered where called."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"render(){\n    return <p>{this.state.count}</p>\n}\n")),(0,a.kt)("h3",{id:"thisreacttostate"},(0,a.kt)("inlineCode",{parentName:"h3"},"this.reactToState()")),(0,a.kt)("p",null,"What if you want to reactively re-render a property's change not in ",(0,a.kt)("inlineCode",{parentName:"p"},"this.state")," or that isn't natively reactive?\ncall ",(0,a.kt)("inlineCode",{parentName:"p"},"this.reactToState()")," on property change."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="component.jsx"',title:'"component.jsx"'},"//global stores are more complicated than this\n//non reactive data\nconst globalStore = 1\n\n...\nrender(){\n    const onChange = ()=> {\n        globalStore = globalStore + 1\n        this.reactToState() //this would call Velte.__updater() to re-render change\n    }\n    return (\n        <p>{globalStore}</p>\n        <button v-on:click={this.onChange}>change</button>\n    )\n}\n\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"}," ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," is called before accessing the different methods because we use ",(0,a.kt)("inlineCode",{parentName:"p"},"this")," to reference the current component instance.")))}u.isMDXComponent=!0}}]);